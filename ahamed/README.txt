The results obtained from the simulations are stored in the "sims" directory. Each simulation where a particular parameter was varied has been stored in a directory whose name indicates the variable parameter, and each directory contains the stats generated for all the benchmarks. The types of files included in each directory are the following:

  * stats_(benchmark): contains the unchanged stats.txt file generated from the simulation. The files have been renamed to include the name of the benchmark on which the simulation was executed.
  * (benchmark).log: contains the logs that were output at the time the simulation was run for that particular benchmark.
  * config_(benchmark).ini: the config file that has been renamed to reflect its correspondence to the benchmark on which the simulation was run.

All the scripts should be run on a machine that supports the gem platform, and all the constants in the scripts should be updated to reference the right directories. All the constants are intuitively named, so it should be clear what they refer to. The last script (graph.py) should be run on a machine that supports Python's matplotlib library functionalities. Aside from the constants, no changes need to be made in order to get the results shown in the report. the scripts should be run in the following order (no arguments need to be provided):

1) run.sh
2) extract_stats.sh
3) separate_stats.sh
4) graph.py

Below is a description of what each of the scripts accomplishes:

  * run.sh: modifies the environment variables then calls the next script, exp.py.
  
  * exp.py: calls the script that actually executes the simulation with different cases for the parameters. (This script should not be called directly.)
  
  * exec_sim.sh: called by exp.py. Runs the gem.opt program with the values provided by the calling script, then renames each of the generated stats.txt files appropriately in the "sims" directory. (This script should not be called directly.)
  
  * extract_stats.sh: goes through all the stats.txt files that were generated, extracts the relvant data, and places the output in the "extracted" directory. The data are provided by benchmark, and in each of the benchmark directories, all the different cases for that benchmark are provided in a separate file.
  
  * separate_stats.sh: extracts the data that will be read to generate the graphs, and formats them in a simple way so as to make parsing the files easier for the graphing script.
  
  * graph.py: takes the data generated by the separate_stats.sh script, and graphs the results for all the provided metrics.

